Program Factories
=================

To generate Program instances based on certain criteria rather than programming them manually every
time, program factories are introduced. They allow to generate ready-made Program instances with a
straight forward interface, requiring only the expected size of the program, and the runtime
environment parameters the programs are expected to be run under (variable memory size, string table
size, string table item length limit). The generic interface for these factories is governed by a
:ref:`Program Factory Base` class, while concrete implementations may offer more (optional)
customization options beyond it, steering the generation process towards specific requirements.

In this document, the :ref:`Program Factory Base` as well as the :ref:`Random Program Factory`
classes are introduced. The latter generates programs randomly, but in a valid way. More factories
may be added in the future on a per-need-basis.


Program Factory Base
--------------------

This is the base class for all program factories. It dictates a simple interface requiring the size
of the expected programs to be generated, and the runtime environment they are expected to be
executed under. The central call for all factories is the `generate()` function, which returns the
generated Program instances.

.. doxygenclass:: beast::ProgramFactoryBase
   :members:


Random Program Factory
----------------------

This concrete implementation of the :ref:`Program Factory Base` interface class generated random
programs. These programs make use of the full scope of operators available in the BEAST library. All
Program instances generated by this factory adhere to proper OpCodes (no invalid OpCodes are used),
and correctly align their parameters, bit-wise and semantically. This means that per operator, all
parameters are in the correct position and have reasonable values based on the environment passed to
the `generate()` function:

* Variables are only declared/used in the range of the passed in variable memory space
* String table entries are only read/written in the range of the passed in string table size
* String table entry content is only generated with valid lengths (although still random)

Also, expected parameter ranges are adhered to (operands are distinguished between `int32_t`,
`int8_t`, and `bool` accordingly). Program instances generated by this class likely don't make sense
logically, but semantically they are correct. These programs can be used as seed material for random
recombination, ensuring that at least the semantic layer is close to what is executable within the
BEAST environment.

Future plans for this class include adding an option to exclude specific operators from the
generation process.

.. doxygenclass:: beast::RandomProgramFactory
   :members:
