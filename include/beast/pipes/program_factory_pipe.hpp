#ifndef BEAST_PROGRAM_FACTORY_PIPE_HPP_
#define BEAST_PROGRAM_FACTORY_PIPE_HPP_

// Standard
#include <deque>
#include <memory>
#include <stdint.h>
#include <vector>

// Internal
#include <beast/pipe.hpp>
#include <beast/program_factory_base.hpp>

namespace beast {

/**
 * @class ProgramFactoryPipe
 * @brief Executes program factories and provides program candidates
 *
 * This class represents a pipeline that executes program factories and provides candidate programs
 * as output. The program factory is responsible for generating new programs based on certain
 * criteria, and the pipeline provides the factory with the necessary environment conditions
 * (maximum program size, variable memory size, string table size, string table item length).
 * Candidate programs generated by the factory are passed as output to the next stage of the
 * pipeline.
 *
 * @note This class does not provide any public methods for adding or removing program factories, as
 * it is intended to be configured with a single factory during initialization.
 *
 * @author Jan Winkler
 * @date 2023-04-03
 */
class ProgramFactoryPipe : public Pipe {
 public:
  /**
   * @brief Initializes this ProgramFactoryPipe instance
   *
   * @param max_candidates The maximum number of candidate programs that can be generated and
   * provided by this pipeline
   * @param max_size The maximum size of any candidate program generated by the pipeline factory
   * @param memory_size The variable memory size for candidate program evaluation
   * @param string_table_size The number of allowed string table entries
   * @param string_table_item_length The maximum allowed length of string table entries
   * @param factory The program factory to use for generating candidate programs
   */
  explicit ProgramFactoryPipe(uint32_t max_candidates, uint32_t max_size, uint32_t memory_size,
                              uint32_t string_table_size, uint32_t string_table_item_length,
                              std::shared_ptr<ProgramFactoryBase> factory);

  /**
   * @brief Executes this ProgramFactoryPipe instance
   *
   * This function executes this ProgramFactoryPipe instance. It generates candidate programs using
   * the factory, and passes them as output to the next stage of the pipeline.
   */
  void execute() override;

  /**
   * @brief Returns the maximum size of any candidate program generated by the pipeline factory
   *
   * @return The maximum size of any candidate program generated by the pipeline factory
   */
  [[nodiscard]] uint32_t getMaxSize() const;

  /**
   * @brief Returns the variable memory size for candidate program evaluation
   *
   * @return The variable memory size for candidate program evaluation
   */
  [[nodiscard]] uint32_t getMemorySize() const;

  /**
   * @brief Returns the number of allowed string table entries
   *
   * @return The number of allowed string table entries
   */
  [[nodiscard]] uint32_t getStringTableSize() const;

  /**
   * @brief Returns the maximum allowed length of string table entries
   *
   * @return The maximum allowed length of string table entries
   */
  [[nodiscard]] uint32_t getStringTableItemLength() const;

  /**
   * @brief Returns the program factory used for generating candidate programs
   *
   * @return The program factory used for generating candidate programs
   */
  [[nodiscard]] std::shared_ptr<ProgramFactoryBase> getFactory() const;

 private:
  /**
   * @var ProgramFactoryPipe::factory_
   * @brief The program factory used for generating candidate programs
   */
  const std::shared_ptr<ProgramFactoryBase> factory_;

  /**
   * @var ProgramFactoryPipe::max_size_
   * @brief The maximum size of any candidate program generated by the pipeline factory
   */
  uint32_t max_size_;

  /**
   * @var ProgramFactoryPipe::memory_size_
   * @brief The variable memory size for candidate program evaluation
   */
  uint32_t memory_size_;

  /**
   * @var ProgramFactoryPipe::string_table_size_
   * @brief The number of allowed string table entries
   */
  uint32_t string_table_size_;

  /**
   * @var ProgramFactoryPipe::string_table_item_length_
   * @brief The maximum allowed length of string table entries
   */
  uint32_t string_table_item_length_;
};

} // namespace beast

#endif // BEAST_PROGRAM_FACTORY_PIPE_HPP_
