#ifndef BEAST_RANDOM_PROGRAM_FACTORY_HPP_
#define BEAST_RANDOM_PROGRAM_FACTORY_HPP_

// Internal
#include <beast/program_factory_base.hpp>

namespace beast {

/**
 * @class RandomProgramFactory
 * @brief Generates random programs with a valid structure
 *
 * This implementation of the abstract ProgramFactoryBase class can be used to generate Program
 * instances that have a random, albeit valid structure. Only valid operators are used in the
 * respective programs, the operators are aligned correctly, and variable indices, string table
 * indices, and string lengths are all within bounds of the passed in runtime environment
 * parameters.
 */
class RandomProgramFactory : public ProgramFactoryBase {
 public:
  /**
   * @fn RandomProgramFactory::generate
   * @brief Generates a program consisting of random but valid operators and operands
   *
   * The programs generated by this function make use of the full operator set supported by the
   * BEAST library.
   *
   * @param size The maximum size of the program to generate, in bytes
   * @param memory_size The memory size the generated program would be executed with
   * @param string_table_size The string table size the generated program would be executed with
   * @param string_table_item_length The string table item length the generated program would be
   *        executed with
   * @return A randomly generated, but valid program
   */
  [[nodiscard]] Program generate(
      uint32_t size, uint32_t memory_size, uint32_t string_table_size,
      uint32_t string_table_item_length) override;
};

}  // namespace beast

#endif  // BEAST_RANDOM_PROGRAM_FACTORY_HPP_
